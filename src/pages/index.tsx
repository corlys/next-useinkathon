import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react"
import { useInkathon, useRegisteredContract, contractQuery, shibuya, unwrapResultOrError, contractTx } from "@scio-labs/use-inkathon";
import { useForm, SubmitHandler } from 'react-hook-form'
import { toast } from "react-toastify";
import { ConnectButton } from "@/components/Web3"
type GreetForm = {
  greet: string
}

const Home: NextPage = () => {

  const { api, isConnected, isConnecting, activeAccount, activeSigner } = useInkathon();
  const { contract, } = useRegisteredContract('greeter', shibuya.network)

  const { handleSubmit, register, reset } = useForm<GreetForm>({
    defaultValues: {
      greet: ""
    }
  })

  useEffect(() => {
    queryGreeting();
  }, [contract])

  const [greeting, setGreeting] = useState<string | null>(null)
  const queryGreeting = async () => {
    if (!contract || !api) return
    try {
      const query = await contractQuery(api, "", contract, "get_message")
      const message = unwrapResultOrError<string>(query)
      setGreeting(message)
    } catch (error) {
      console.log(error)
    }
  }

  const onSubmit: SubmitHandler<GreetForm> = async (data) => {
    if (!data.greet) return
    console.log(isConnecting)
    if (!contract || !api || !activeAccount || !activeSigner) return
    const id = toast.loading("Processing the tx")
    try {
      await api.isReady;
      console.log(activeSigner)
      const tx = await contractTx(api, activeAccount.address, contract, "set_message", {}, [data.greet])
      console.log(tx)
      toast.update(id, {
        autoClose: 7000,
        closeOnClick: true,
        render: "All is good in substrate land",
        type: "success",
        isLoading: false
      })
    } catch (error) {
      console.log(error)
      toast.update(id, {
        autoClose: 7000,
        closeOnClick: true,
        render: "All is not so good in substrate land",
        type: "error",
        isLoading: false
      })
    } finally {
      reset()
      await queryGreeting()
    }
  }

  return (
    <>
      <Head>
        <title>Rust/Ink Greeter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            use<span className="text-[hsl(280,100%,70%)]">Ink</span> Greeter
          </h1>
          <div className="grid grid-cols-1">
            <ConnectButton />
          </div>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            {
              isConnected &&
              <>
                <div className="text-pink-200 flex flex-col items-center justify-center border border-gray-300 rounded-lg p-4 gap-6">
                  <h3 className="text-lg font-semibold">Fetch Greeter</h3>
                  <h3 className="text-md font-semibold">{greeting}</h3>
                </div>
                <div className="flex flex-col items-center justify-center gap-6 p-4 border border-gray-300 rounded-lg text-pink-200">
                  <h3 className="text-lg font-semibold">
                    Set Greeter
                  </h3>
                  <div className="flex flex-row items-center justify-center gap-2">
                    <input {...register("greet")} className="p-2 border border-pink-300 rounded bg-gray-500"></input>
                    <button onClick={handleSubmit(onSubmit)} className="px-4 py-2 flex items-center justify-center bodder border-pink-300 rounded-lg bg-blue-600 hover:bg-blue-400">Submit</button>
                  </div>
                </div>
              </>

            }
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
